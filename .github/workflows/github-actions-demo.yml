name: CI/CD Pipeline

on:
  push:
    branches:
      - master

  pull_request:
    types:
      - closed
    branches:
      - master
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Check Out Code
        uses: actions/checkout@v4

      - name: Set Environment Variables for PR
        if: github.event_name == 'pull_request'
        run: |
          echo "PR_MERGED=${{ github.event.pull_request.merged }}" >> $GITHUB_ENV
          echo "BASE_BRANCH=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          echo "HEAD_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV

      # - name: Set Environment Variables for Push
      #   if: github.event_name == 'push'
      #   run: |
      #     echo "BASE_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      #     echo "HEAD_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      #     echo "PR_MERGED=false" >> $GITHUB_ENV

      - name: Extract Branch Name
        id: extract_branch
        shell: bash
        run: |
          echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: Determine Version Increment Strategy
        id: version_strategy
        shell: bash
        run: |
          BRANCH="${{ steps.extract_branch.outputs.branch }}"
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            base_branch="${{ github.event.pull_request.base.ref }}"
            head_branch="${{ github.event.pull_request.head.ref }}"

            # Determine the type of version increment needed
            if [[ "$base_branch" == "master" && "$head_branch" =~ hotfix ]]; then
                INCREMENT=PATCH
            elif [[ "$base_branch" == "master" && "$head_branch" == "dev" ]]; then
              INCREMENT=MINOR
            elif [[ "$base_branch" == "master" ]]; then
              INCREMENT=MAJOR
            else
              INCREMENT=MINOR
            fi
          else
              INCREMENT=MAJOR
          fi
          echo "increment=$INCREMENT" >> $GITHUB_OUTPUT

      - name: Get Latest Tag
        id: latest_tag
        shell: bash
        run: |
          LATEST_TAG=$(cat version.txt 2>/dev/null)
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Increment Version Number
        id: version
        shell: bash
        run: |
          LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"
          INCREMENT="${{ steps.version_strategy.outputs.increment }}"
          echo "${{ steps.version_strategy.outputs.increment }}"


          MAJOR=$(echo $LATEST_TAG | cut -d. -f1)
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)

          if [[ "$INCREMENT" == "minor" ]]; then
            MINOR=$((MINOR+1))
            PATCH=0
          elif [[ "$INCREMENT" == "patch" ]]; then
            PATCH=$((PATCH+1))
          else
            MAJOR=$((MAJOR+1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo $NEW_VERSION > version.txt

      - name: Debug Output
        run: |
          echo "Merged: ${{ github.event.pull_request.merged }}"
          echo "Base Branch: ${{ github.event.pull_request.base.ref }}"
          echo "Head Branch: ${{ github.event.pull_request.head.ref }}"
          echo "Increment: ${{ steps.version_strategy.outputs.increment }}"

      - name: Commit and push the new version file
        if: steps.version.outcome == 'success' # Ensure this step runs only if Increment version was successful
        run: |
          new_version="${{ steps.version.outputs.new_version }}"
          if [[ "$new_version" != "" && "$new_version" != "${{ steps.version.outputs.version }}" ]]; then
            git config --local user.name "GitHub Actions"
            git config --local user.email "actions@github.com"
            git add version.txt
            git diff --staged --exit-code || git commit -m "Bump version to $new_version"
            git push origin "${{ steps.extract_branch.outputs.branch }}"
          else
            echo "new_version=${{ steps.version.outputs.new_version }}" >> $GITHUB_OUTPUT
          fi
          echo "new version is: ${{ steps.version.outputs.new_version }}"

      - name: Build Docker Image
        run: |
          docker build --build-arg="VERSION=${{ steps.version.outputs.new_version }}" -t "yohaikorem/maven_app:${{ steps.version.outputs.new_version }}" .

      - name: Push Docker Image
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: |
          echo "${DOCKER_HUB_PASSWORD}" | docker login -u "${DOCKER_HUB_USERNAME}" --password-stdin
          docker tag "yohaikorem/maven_app:${{ steps.version.outputs.new_version }}" yohaikorem/maven_app:latest
          docker push "yohaikorem/maven_app:${{ steps.version.outputs.new_version }}"
          docker push "yohaikorem/maven_app:latest"
  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: 'yohaikorem/maven_app:${{ needs.build.outputs.new_version }}'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.EC2_ACCESS_KEY}}
          aws-secret-access-key: ${{ secrets.EC2_SECRET_KEY }}
          aws-region: eu-west-3

      - name: Wait for EKS cluster to be ACTIVE
        run: |
          while true; do
            STATUS=$(aws eks describe-cluster --name popo --query "cluster.status" --output text)
            echo "Cluster status: $STATUS"
            if [ "$STATUS" == "ACTIVE" ]; then
              break
            fi
            echo "Waiting for EKS cluster to be ACTIVE..."
            sleep 30
          done

      - name: Update kube config
        run: aws eks update-kubeconfig --name popo --region eu-west-3

      - name: Deploy to EKS
        env:
          REGISTRY: dockerhub
        run: |
          sed -i 's/$IMAGE/${{ env.IMAGE_TAG }}/g' manifests/deployments.yaml | kubectl apply -f manifests/deployments.yaml
