name: CI/CD Pipeline

on:
  push:
    branches:
      - master

  pull_request:
    types:
      - closed
    branches:
      - master
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check Out Code
        uses: actions/checkout@v4

      - name: Extract Branch Name
        id: extract_branch
        shell: bash
        run: |
          echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: Determine Version Increment Strategy
        id: version_strategy
        shell: bash
        run: |
          BRANCH="${{ steps.extract_branch.outputs.branch }}"
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            base_branch="${{ github.event.pull_request.base.ref }}"
            head_branch="${{ github.event.pull_request.head.ref }}"

            # Determine the type of version increment needed
            if [[ "$base_branch" == "master" && "$head_branch" =~ hotfix ]]; then
                INCREMENT=PATCH
            elif [[ "$base_branch" == "master" && "$head_branch" == "dev" ]]; then
              INCREMENT=MINOR
            elif [[ "$base_branch" == "master" ]]; then
              INCREMENT=MAJOR
            else
              INCREMENT=MINOR
            fi
            echo "increment=$INCREMENT" >> $GITHUB_OUTPUT
          fi

      - name: Get Latest Tag
        id: latest_tag
        shell: bash
        run: |
          LATEST_TAG=$(cat version.txt 2>/dev/null)
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Increment Version Number
        id: version
        shell: bash
        run: |
          LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"
          INCREMENT="${{ steps.version_strategy.outputs.increment }}"
          echo "${{ steps.version_strategy.outputs.increment }}"


          MAJOR=$(echo $LATEST_TAG | cut -d. -f1)
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)

          if [[ "$INCREMENT" == "minor" ]]; then
            MINOR=$((MINOR+1))
            PATCH=0
          elif [[ "$INCREMENT" == "patch" ]]; then
            PATCH=$((PATCH+1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo $NEW_VERSION > version.txt

      - name: Debug Output
        run: |
          echo "Merged: ${{ github.event.pull_request.merged }}"
          echo "Base Branch: ${{ github.event.pull_request.base.ref }}"
          echo "Head Branch: ${{ github.event.pull_request.head.ref }}"
          echo "Increment: ${{ steps.version_strategy.outputs.increment }}"

      - name: Commit and push the new version file
        if: steps.version.outcome == 'success' # Ensure this step runs only if Increment version was successful
        run: |
          new_version="${{ steps.version.outputs.new_version }}"
          if [[ "$new_version" != "" && "$new_version" != "${{ steps.version.outputs.version }}" ]]; then
            git config --local user.name "GitHub Actions"
            git config --local user.email "actions@github.com"
            git add version.txt
            git diff --staged --exit-code || git commit -m "Bump version to $new_version"
            git push origin "${{ steps.extract_branch.outputs.branch }}"
          else
            echo "new_version=${{ steps.version.outputs.new_version }}" >> $GITHUB_OUTPUT
          fi
          echo "new version is: ${{ steps.version.outputs.new_version }}"

      - name: Build Docker Image
        run: |
          docker build --build-arg="VERSION=${{ steps.version.outputs.new_version }}" -t "yohaikorem/maven_app:${{ steps.version.outputs.new_version }}" .

      - name: Push Docker Image
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: |
          echo "${DOCKER_HUB_PASSWORD}" | docker login -u "${DOCKER_HUB_USERNAME}" --password-stdin
          docker tag "yohaikorem/maven_app:${{ steps.version.outputs.new_version }}" yohaikorem/maven_app:latest
          docker push "yohaikorem/maven_app:${{ steps.version.outputs.new_version }}"

      # - name: Setup instance with Terraform
      #   env:
      #     AWS_ACCESS_KEY: ${{AWS_ACCESS_KEY}}
      #     AWS_SECRET_KEY: ${{AWS_SECRET_KEY}}
      #   run: |

      # - name: Setup ssh
      #   shell: bash
      #   run: |
      #     service ssh status
      #     eval `ssh-agent -s`
      #     mkdir -p /home/runner/.ssh/
      #     touch /home/runner/.ssh/id_rsa
      #     echo -e "${{secrets.SSH_KEY}}" > /home/runner/.ssh/id_rsa
      #     chmod 700 /home/runner/.ssh/id_rsa
      #     ssh-keyscan -t rsa,dsa,ecdsa,ed25519 ${{secrets.SSH_HOST}} >> /home/runner/.ssh/known_hosts

      # - name: Run ansible script
      #   shell: bash
      #   run: |
      #     service ssh status
      #     cat setup-prod.yml
      #     ansible-playbook -vvv --private-key /home/runner/.ssh/id_rsa -u ${{secrets.ANSIBLE_DEPLOY_USER}} -i hosts.yml setup-prod.yml

      # - name: Deploy app
      #   run: |
      #     "yohaikorem/maven_app:${{ steps.version.outputs.new_version }}"
